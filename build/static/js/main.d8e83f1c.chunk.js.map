{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","handleImportance","label","important","className","content","onClick","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","showError","setShowError","errorMessage","setErrorMessage","useEffect","noteService","initialValues","notesToShow","filter","src","alt","map","key","find","n","changedNote","modifiedNote","catch","error","setTimeout","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","createdNote","concat","onChange","target","value","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d8e83f1c.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, handleImportance }) => {\n    const label = note.important\n        ? 'make not important' : 'make important'\n    return (\n    <li className=\"note\">\n        {note.content} \n        <button onClick={handleImportance}>{label}</button>\n    </li>\n    )\n}\n\nexport default Note","import axios from 'axios'\n//heroku as a backend\nconst baseUrl = 'api/notes'\n//const baseUrl = 'https://mynotes55.herokuapp.com/api/notes'\n\n//local host server as a backend\n//const baseUrl = 'http://localhost:3001/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request =  axios.post(baseUrl,newObject)\n    return request.then(response => response.data)\n\n}\n\nconst update = (id,newObject) => {\n    const request =  axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n\n}\n\nexport default {getAll, create, update}\n\n/* //This is one way of extracting communication with backend into separate module \nconst getAll = () => {\n    return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n    return axios.post(baseUrl,newObject)\n\n}\n\nconst update = (id,newObject) => {\n    return axios.put(`${baseUrl}/${id}`, newObject)\n\n}\n*/","import React from 'react'\n\nconst Notification = ({message}) => {\n    if(message === null){\n        return null\n    }\n\n    return(\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    }\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>&#169; Teyeb Hussen. Note app, Department of Computer Science, University of Helsinki 2020</em>\n        </div>\n    )\n}\n\nexport default Footer ","import React, { useState, useEffect } from 'react'\n//import ReactDOM from 'react-dom'\nimport Note from './components/Note'\n//import Form from './components/Form'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\n\nconst App = () => {\n\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(false)\n    const [showError, setShowError] = useState('')\n    const [errorMessage, setErrorMessage] = useState(null)\n    \n    \n\n    useEffect(() => {\n        \n        noteService\n            .getAll()\n            .then(initialValues => {\n                setNotes(initialValues)\n            })\n    }, [])\n\n    //console.log('render', notes.length, 'notes')\n\n    const addNote = (event) => {\n        event.preventDefault() //prevents form submiting usual action like page load\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5,\n        }\n        if(!newNote){\n            setShowError('Please enter note')\n            return\n        }\n        noteService\n            .create(noteObject)\n            .then(createdNote => {\n                setNotes(notes.concat(createdNote))\n                setNewNote('')\n                setShowError('')\n            })\n        \n    }\n    const handleNoteChange = (event) => {\n        setNewNote(event.target.value)\n        if(event.target.value){\n            setShowError(event.target.value)\n        }else{\n            setShowError('Enter somthing')\n        }\n        \n\n    }\n    \n   \n    const handleImportance = (id) => {\n        const note = notes.find(n => n.id === id) //find the object we want to modify\n        const changedNote = { ...note, important: !note.important} //importance of the object changed \n        \n        noteService\n            .update(id, changedNote)\n            .then( modifiedNote => {\n                setNotes(notes.map(\n                    note => note.id !== id ? note : modifiedNote\n                ))\n            })\n            .catch(error => {\n                setErrorMessage(`The ${note.content} is aleady deleted.`)\n                setTimeout(()=> {\n                    setErrorMessage(null)\n                }, 5000)\n                setNotes(notes.filter(n => n.id !== id))\n            })\n       \n\n    }\n    const notesToShow = showAll ? notes : notes.filter(note => note.important/*evaluat true and note returned*/)\n\n    \n    //console.log(promise)\n    /* const promise2 = axios.get('http://localhost:3001/notes')\n    console.log(promise2)\n     */\n    /* Promise.resolve(promise).then(function (value) {\n        setValues(value.data)\n        console.log(value.data[0].title); // \"Success\"\n    }, function (value) {\n        // not called\n    }); */\n\n    return (\n        <div>\n            <div > <img className=\"logogurage\" src=\"gurage.png\" alt=\"gurage\" /> </div>\n            <h1>Notes</h1>\n            <Notification  message={errorMessage} />\n            <button onClick={() => setShowAll(!showAll)}>Show {showAll ? 'Important' : 'All'}</button>\n            <ul>\n                {notesToShow.map((note) => <Note key={note.id} handleImportance={() => handleImportance(note.id)} note={note}/>)}\n               \n            </ul>\n\n            <form onSubmit={addNote}>\n                <input onChange={handleNoteChange} value={newNote} />\n                <button type=\"submit\">save</button>\n            </form>\n            <div style={{color:\"red\", fontSize: 19}}>{showError ? showError: ''}</div>\n            <Footer />\n           \n        </div>\n    )\n}\nexport default App ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n  /*  const notes = [\n    {\n        id: 1,\n        content: 'HTML is easy',\n        date: '2019-05-30T17:30:31.098Z',\n        important: true\n    },\n    {\n        id: 2,\n        content: 'Browser can execute only Javascript',\n        date: '2019-05-30T18:39:34.091Z',\n        important: false\n    },\n    {\n        id: 3,\n        content: 'GET and POST are the most important methods of HTTP protocol',\n        date: '2019-05-30T19:20:14.298Z',\n        important: true\n    }\n]  */\n \nReactDOM.render(\n    <App />\n    , document.getElementById('root')\n)"],"sourceRoot":""}